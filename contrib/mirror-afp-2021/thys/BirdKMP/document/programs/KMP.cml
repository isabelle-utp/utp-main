(* Bird's version of Knuth-Morris-Pratt string matching.
   Chapter 17, "Pearls of Functional Algorithm Design", 2010.
    - with the `K' (next) optimisation
    - using backpatching
    - in CakeML 1203 (~ 2020-04-07)
 *)

structure KMP =
struct

datatype 'a thunk = Val 'a | Thunk (unit -> 'a);

type 'a lazy = 'a thunk ref;

fun lazy f =
  Ref (Thunk f);

fun force su =
  case !su of
      Val v => v
    | Thunk f => let val v = f () in su := Val v; v end;

datatype 'a tree
  = Null
  | Node ('a list) ('a tree lazy) ('a tree);

type 'a ltree = 'a tree lazy;

exception Fail string;

fun kmatches eq ws =
  let
    fun ok t = case force t of Node [] l r => True | _ => False
    fun next x t =
           lazy (fn () => let val t = force t in case t of
             Null => Null
           | Node [] _ _ => t
           | Node (v :: vs) l _ => if eq x v then force l else t end)
     (* Backpatching! *)
     val root = lazy (fn () => raise Fail "blackhole")
     fun op' t x =
           lazy (fn () => case force t of
             Null => force root
           | Node vvs l r =>
             (case vvs of
                [] => force (op' l x)
              | v :: vs => if eq x v then r else force (op' l x)))
     and grep l vvs =
           ( case vvs of
             [] => Node [] l Null
           | v :: vs => Node vvs (next v l) (grep (op' l v) vs) )
     val () = root := Thunk (fn () => grep (lazy (fn () => Null)) ws)
     fun step nt x = (fst nt + 1, op' (snd nt) x)
     fun rheight t =
           case t of Null => 0 | Node _ _ r => 1 + rheight r
     fun driver nt xxs =
           case xxs of
             [] => if ok (snd nt) then [fst nt] else []
           | x :: xs => let val nt' = step nt x
                        in if ok (snd nt) then fst nt :: driver nt' xs else driver nt' xs end
  in
    driver (0, root)
  end;

end;

KMP.kmatches (op =) [] [] ;
KMP.kmatches (op =) [] [1,2,3] ;
KMP.kmatches (op =) [1, 2, 1] [] ;
KMP.kmatches (op =) [1, 2] [1, 2, 3] ;
KMP.kmatches (op =) [1, 2, 3, 1, 2] [1, 2, 1, 2, 3, 1, 2, 3, 1, 2] ;

List.app (fn x => print (Int.toString x ^ "\n"))
  (KMP.kmatches (op =) [1, 2, 3, 1, 2] [1, 2, 1, 2, 3, 1, 2, 3, 1, 2]) ;

val text = List.concat (List.tabulate 1000000 (fn _ => [1, 2, 1, 2, 3, 1, 2, 3, 1, 2]));
val _ = (fn x => print (Int.toString (List.length x) ^ "\n")) (KMP.kmatches (op =) [1, 2, 3, 1, 2] text);
